# ----------------------------------------------------------------------------
#
# Copyright (c) 2018, WSO2 Inc. (http://wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# ----------------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template to run Ballerina Performance Tests. This template
  creates Amazon EC2 instance in a VPC. The JMeter Client EC2 instance will be in a
  public subnet with a public IP. All other EC2 instances will be in a private subnet.
  **WARNING** This template creates multipe Amazon AWS resources. You will be
  billed for the AWS resources used if you create a stack from this template.
##############################################################################################
# Mappings for Ubuntu AMIs of Instance Type: hvm:ebs-ssd
# Refer https://cloud-images.ubuntu.com/locator/ec2/ for ubuntu AMI-ID's for the LTS version
##############################################################################################
Mappings:
  AWSRegion2AMI:
    us-east-1:
      AMI: ami-04169656fea786776
    us-east-2:
      AMI: ami-0552e3455b9bc8d50
    us-west-1:
      AMI: ami-059e7901352ebaef8
    us-west-2:
      AMI: ami-51537029
#############################
# User inputs
#############################
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  TestName:
    Description: Name of the tests
    Type: String
    Default: Ballerina Performance Tests
  PerformanceBallerinaDistributionURL:
    Description: The URL to download 'Performance Ballerina Distribution'.
    Type: String
    ConstraintDescription: must be a valid URL
    AllowedPattern: ^https?:\/\/.*$
  KeyFileURL:
    Description: The URL to download the key file.
    Type: String
    ConstraintDescription: must be a valid URL
    AllowedPattern: ^https?:\/\/.*$
  JMeterClientInstanceType:
    Description: JMeter Client EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m4.large
      - m4.xlarge
      - c3.large
      - c3.xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  JMeterServerInstanceType:
    Description: JMeter Server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m4.large
      - m4.xlarge
      - c3.large
      - c3.xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  BallerinaInstanceType:
    Description: Ballerina EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m4.large
      - m4.xlarge
      - c3.large
      - c3.xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  BackendInstanceType:
    Description: Backend EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m4.large
      - m4.xlarge
      - c3.large
      - c3.xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
################################
# Create AWS resources
################################
Resources:
  ##########################################################################################
  # Create VPC, public subnet and private subnet
  # https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario2.html
  # https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Internet_Gateway.html
  ##########################################################################################
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'VPC'
              - !Ref TestName
  # Configure Public Subnet
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PublicSubnet'
              - !Ref TestName
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'InternetGateway'
              - !Ref TestName
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PublicRouteTable'
              - !Ref TestName
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  # Configure Private Subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PrivateSubnet'
              - !Ref TestName
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: AttachGateway
    Properties:
      AllocationId: !GetAtt 
        - NatGatewayIPAddress
        - AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'NatGateway'
              - !Ref TestName
  NatGatewayIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PrivateRouteTable'
              - !Ref TestName
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security Group for EC2 instances
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  #######################
  # EC2 Instances
  #######################
  JMeterClientInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref JMeterClientInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'JMeter Client'
              - !Ref TestName
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Change to user directory
          cd /home/ubuntu
          # Install AWS CloudFormation Helper Scripts
          apt-get -y install python-setuptools
          mkdir aws-cfn-bootstrap-latest
          curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
          easy_install aws-cfn-bootstrap-latest
          # Download and Extract scripts
          curl -s ${PerformanceBallerinaDistributionURL} | tar xz
          ./setup/setup-jmeter-client-ballerina.sh -g -k ${KeyFileURL} \
          -a jmeter1 -n ${JMeterServer1Instance.PrivateIp} \
          -a jmeter2 -n ${JMeterServer2Instance.PrivateIp} \
          -a ballerina -n ${BallerinaInstance.PrivateIp} \
          -a netty -n ${BackendInstance.PrivateIp}
          chown -R ubuntu:ubuntu /home/ubuntu
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource JMeterClientInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  JMeterServer1Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref JMeterServerInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Join
              - ':'
              - - 'JMeter Server 1'
                - !Ref TestName
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Change to user directory
          cd /home/ubuntu
          # Install AWS CloudFormation Helper Scripts
          apt-get -y install python-setuptools
          mkdir aws-cfn-bootstrap-latest
          curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
          easy_install aws-cfn-bootstrap-latest
          # Download and Extract scripts
          curl -s ${PerformanceBallerinaDistributionURL} | tar xz
          ./setup/setup-jmeter-ballerina.sh -g
          chown -R ubuntu:ubuntu /home/ubuntu
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource JMeterServer1Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  JMeterServer2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref JMeterServerInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Join
              - ':'
              - - 'JMeter Server 2'
                - !Ref TestName
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Change to user directory
          cd /home/ubuntu
          # Install AWS CloudFormation Helper Scripts
          apt-get -y install python-setuptools
          mkdir aws-cfn-bootstrap-latest
          curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
          easy_install aws-cfn-bootstrap-latest
          # Download and Extract scripts
          curl -s ${PerformanceBallerinaDistributionURL} | tar xz
          ./setup/setup-jmeter-ballerina.sh -g
          chown -R ubuntu:ubuntu /home/ubuntu
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource JMeterServer2Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  BallerinaInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref BallerinaInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Join
              - ':'
              - - 'Ballerina'
                - !Ref TestName
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Change to user directory
          cd /home/ubuntu
          # Install AWS CloudFormation Helper Scripts
          apt-get -y install python-setuptools
          mkdir aws-cfn-bootstrap-latest
          curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
          easy_install aws-cfn-bootstrap-latest
          # Download and Extract scripts
          curl -s ${PerformanceBallerinaDistributionURL} | tar xz
          ./setup/setup-ballerina.sh -g -d 0.981.1 -n ${BackendInstance.PrivateIp}
          chown -R ubuntu:ubuntu /home/ubuntu
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BallerinaInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  BackendInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref BackendInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Join
              - ':'
              - - 'Ballerina'
                - !Ref TestName
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Change to user directory
          cd /home/ubuntu
          # Install AWS CloudFormation Helper Scripts
          apt-get -y install python-setuptools
          mkdir aws-cfn-bootstrap-latest
          curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
          easy_install aws-cfn-bootstrap-latest
          # Download and Extract scripts
          curl -s ${PerformanceBallerinaDistributionURL} | tar xz
          ./setup/setup-netty.sh
          chown -R ubuntu:ubuntu /home/ubuntu
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BackendInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

Outputs:
  URL:
    Description: JMeter Client Public IP
    Value: !Join
    - ''
    - -  http://
      -  !GetAtt JMeterClientInstance.PublicIp
